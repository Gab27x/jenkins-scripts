pipeline {
    agent any

    tools {
        maven 'Maven'
        jdk 'Java11'
    }

    environment {
        GIT_REPO = 'https://github.com/Gab27x/ecommerce-microservice-backend-app.git'
        BRANCH = 'master'
        INIT_SLEEP_TIME = 20
        SLEEP_TIME = 15
        MAX_RETRIES = 10
        NODES_NUM = 5
        EUREKA_URL = 'http://service-discovery-container:8761/eureka/apps' 
        DOCKER_REPO = 'gab27x/microservices'
        SERVICES = 'user-service,order-service'
    
    }

    stages {

        stage('CLONE') {
            steps {
                deleteDir()
                sh "git clone -b ${BRANCH} ${GIT_REPO} ."
            }
        }

        stage('BUILD AND TEST') {
            steps {
                sh "mvn clean package"
                sh "mvn test"
            }
        }

        stage('DOCKER COMPOSE UP'){
            steps{
                echo '=== Turning on core ==='
                sh 'docker compose -f core.yml up -d'
                echo 'core up'

                echo '=== Turning on project-compose ==='
                sh 'docker compose -f project-compose.yml up -d --build'
                echo 'micro services up'
 
            }
        }

        stage('TEST HEALTH') {
            steps {
                script {
                    def maxRetries = env.MAX_RETRIES.toInteger()
                    def sleepTime = env.SLEEP_TIME.toInteger()
                    def nodesNum = env.NODES_NUM.toInteger()
                    def eurekaUrl = env.EUREKA_URL
                    def success = false

                    for (int i = 1; i <= maxRetries; i++) {
                        echo "Intento ${i} de ${maxRetries}..."
                        
                        def response = sh(
                            script: "docker run --rm --network microservices_network curlimages/curl -s --max-time 5 ${eurekaUrl} || true",
                            returnStdout: true
                        ).trim()

                        if (response) {
                            def appCount = sh(script: "echo '${response}' | grep -o '<application>' | wc -l | tr -d ' '", returnStdout: true).trim().toInteger()
                            def upCount = sh(script: "echo '${response}' | grep -c '<status>UP</status>' | tr -d ' '", returnStdout: true).trim().toInteger()
                            echo "Aplicaciones registradas: ${appCount}, UP: ${upCount}"

                            if (appCount == nodesNum && upCount == nodesNum) {
                                success = true
                                break
                            }
                        } else {
                            echo "No se obtuvo respuesta de Eureka."
                        }

                        sleep sleepTime
                    }

                    if (!success) {
                        error "Eureka no alcanzó las ${nodesNum} aplicaciones UP tras ${maxRetries} intentos."
                    } else {
                        echo "Eureka está completamente operativo."
                    }
                }
            }
        }

        stage('POSTMAN TESTS') {
            steps {
                echo '=== Ejecutando pruebas Postman ==='
                sh '''
                    docker run --rm \
                    --name postman-newman-runner \
                    --network microservices_network \
                    -v $(pwd):/etc/newman \
                    postman/newman:latest run /etc/newman/postman_collection.json \
                    --environment /etc/newman/variables_pipeline.json \
                    --reporters cli,junit \
                    --reporter-junit-export /etc/newman/newman-report.xml
                '''
            }
        }

        stage('SHUTDOWN DOCKER COMPOSE'){
            steps{

                sh'docker compose -f project-compose.yml down -v --remove-orphans'
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    // Login a Docker Hub usando credenciales de Jenkins
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    }

                    // Convertir string de servicios a lista
                    def servicesList = SERVICES.split(',')

                    servicesList.each { service ->
                        echo "============================="
                        echo "Processing $service"
                        echo "============================="

                        // Obtener última versión del servicio desde Docker Hub
                        def lastTag = sh(
                            script: """
                                curl -s https://hub.docker.com/v2/repositories/$DOCKER_REPO/tags?page_size=100 \
                                | jq -r '.results[].name' | grep "^${service}-" | sort -t'-' -k2 -n | tail -1 | cut -d'-' -f2
                            """,
                            returnStdout: true
                        ).trim()

                        // Calcular nueva versión
                        def newTag = lastTag ? (lastTag.toInteger() + 1).toString() : "1"
                        def imageTag = "${service}-${newTag}"

                        echo "Nueva versión para $service: $imageTag"

                        // Build del jar con Maven
                        sh """
                            cd $service
                            ./mvnw clean package -DskipTests
                            cd ..
                        """

                        // Build y push de la imagen Docker
                        sh """
                            docker build -t $DOCKER_REPO:$imageTag $service
                            docker push $DOCKER_REPO:$imageTag
                        """
                    }
                }
            }
        }



    }



    post {
        always {
            echo '=== Limpiando entorno ==='
            
            // Detener y limpiar todos los contenedores
            sh '''
                echo "== Deteniendo y removiendo contenedores Docker =="
                docker compose -f project-compose.yml down -v --remove-orphans || true
                docker compose -f core.yml down -v --remove-orphans || true
            '''
            
            // Limpiar el workspace de Jenkins
            cleanWs()
            echo '=== Workspace limpiado ==='
        }

        success {
            echo 'Pipeline completado con éxito.'
        }

        failure {
            echo 'El pipeline falló. Revisa los logs para más detalles.'
        }
    }

}
