pipeline {
    agent any

    tools {
        maven 'Maven'
        jdk 'Java11'
    }

    environment {
        GIT_REPO = 'https://github.com/Gab27x/ecommerce-microservice-backend-app.git'
        BRANCH = 'master'
    }

    stages {

        stage('CLONE') {
            steps {
                deleteDir()
                sh "git clone -b ${BRANCH} ${GIT_REPO} ."
            }
        }

        stage('BUILD AND TEST') {
            steps {
                sh "mvn clean package"
                sh "mvn test"
            }
        }
        stage('SONARQUBE SCAN') {
            steps {
                script {
                    sh '''
                    set -e

                    echo "=== Levantando SonarQube en Docker ==="
                    docker network create sonar-net || true
                    docker rm -f sonarqube || true
                    docker run -d \
                    --name sonarqube \
                    --network sonar-net \
                    -p 9000:9000 \
                    --platform linux/arm64 \
                    sonarqube:lts-community

                    echo "=== Esperando a que SonarQube esté listo ==="
                    until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
                        echo "Esperando 5s..."
                        sleep 5
                    done

                    echo "=== Generando token automático ==="
                    SONAR_TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate?name=pipeline-token" | grep -o '"token":"[^"]*"' | cut -d':' -f2 | tr -d '"')
                    echo "Token generado: $SONAR_TOKEN"

                    echo "=== Ejecutando análisis Maven Sonar ==="
                    mvn clean package -DskipTests sonar:sonar \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=${SONAR_TOKEN} || true

                    echo "=== Limpiando SonarQube ==="
                    docker rm -f sonarqube || true
                    docker network rm sonar-net || true

                    echo "=== FIN DEL STAGE ==="
                    '''
                }
            }
        }


        stage('TRIVY SCAN') {
            steps {
                script {
                    sh '''
                    docker run --rm \
                    -v ${PWD}:/repo \
                    aquasec/trivy:latest fs /repo \
                    --exit-code 1 \
                    --severity HIGH,CRITICAL \
                    --scanners vulnerability,secret || true
                    '''
                }
            }
        }

    }
    

    post {
        always {
            cleanWs()
            sh 'ls -la'
        }
    }
}
